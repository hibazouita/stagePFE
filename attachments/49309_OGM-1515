Index: core/src/test/java/org/hibernate/ogm/backendtck/type/date/LocalDateEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/test/java/org/hibernate/ogm/backendtck/type/date/LocalDateEntity.java	(date 1533548786000)
+++ core/src/test/java/org/hibernate/ogm/backendtck/type/date/LocalDateEntity.java	(date 1533548786000)
@@ -0,0 +1,74 @@
+package org.hibernate.ogm.backendtck.type.date;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+
+@Entity
+public class LocalDateEntity {
+
+	@Id
+	private Integer id;
+
+	private String name;
+
+	private LocalDate day;
+
+	private LocalTime time;
+
+	private LocalDateTime moment;
+
+	public LocalDateEntity() {
+	}
+
+	public LocalDateEntity(Integer id, String name) {
+		this.id = id;
+		this.name = name;
+
+		this.day = LocalDate.now();
+		this.time = LocalTime.now();
+		this.moment = LocalDateTime.of(day, time);
+	}
+
+	public Integer getId() {
+		return id;
+	}
+
+	public void setId(Integer id) {
+		this.id = id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public LocalDate getDay() {
+		return day;
+	}
+
+	public void setDay(LocalDate day) {
+		this.day = day;
+	}
+
+	public LocalTime getTime() {
+		return time;
+	}
+
+	public void setTime(LocalTime time) {
+		this.time = time;
+	}
+
+	public LocalDateTime getMoment() {
+		return moment;
+	}
+
+	public void setMoment(LocalDateTime moment) {
+		this.moment = moment;
+	}
+}
Index: core/src/test/java/org/hibernate/ogm/backendtck/type/date/JavaDateTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/test/java/org/hibernate/ogm/backendtck/type/date/JavaDateTest.java	(date 1533549580000)
+++ core/src/test/java/org/hibernate/ogm/backendtck/type/date/JavaDateTest.java	(date 1533549580000)
@@ -0,0 +1,65 @@
+package org.hibernate.ogm.backendtck.type.date;
+
+import static org.fest.assertions.Assertions.assertThat;
+import static org.hibernate.ogm.utils.TestHelper.inTransaction;
+
+import org.hibernate.SessionFactory;
+import org.hibernate.ogm.sessionfactory.SessionFactoryBuilder;
+import org.hibernate.ogm.utils.TestForIssue;
+
+import org.junit.After;
+import org.junit.Test;
+
+@TestForIssue(jiraKey = "OGM-1515")
+public class JavaDateTest {
+
+	private SessionFactoryBuilder config;
+	private Object entity;
+
+	@Test
+	public void testUtilDates() {
+		config = SessionFactoryBuilder.entities( UtilDateEntity.class );
+		entity = new UtilDateEntity( 1, "A entity using classic Java util.Date" );
+
+		try ( SessionFactory sessionFactory = config.build() ) {
+			inTransaction( sessionFactory, session ->
+					session.persist( entity )
+			);
+
+			inTransaction( sessionFactory, session -> {
+				UtilDateEntity reloaded = session.load( UtilDateEntity.class, 1 );
+				assertThat( reloaded.getMoment() ).isNotNull();
+			} );
+		}
+	}
+
+	@Test
+	public void testLocalDates() {
+		config = SessionFactoryBuilder.entities( UtilDateEntity.class );
+		entity = new LocalDateEntity( 1, "A entity using Java8 local date" );
+
+		try ( SessionFactory sessionFactory = config.build() ) {
+			inTransaction( sessionFactory, session ->
+					session.persist( entity )
+			);
+
+			inTransaction( sessionFactory, session -> {
+				LocalDateEntity reloaded = session.load( LocalDateEntity.class, 1 );
+				assertThat( reloaded.getMoment() ).isNotNull();
+			} );
+		}
+	}
+
+	@After
+	public void cleanUp() {
+		if ( entity == null ) {
+			return;
+		}
+
+		try ( SessionFactory sessionFactory = config.build() ) {
+			inTransaction( sessionFactory, session -> {
+				session.delete( entity );
+			} );
+		}
+	}
+}
Index: core/src/test/java/org/hibernate/ogm/backendtck/type/date/UtilDateEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/test/java/org/hibernate/ogm/backendtck/type/date/UtilDateEntity.java	(date 1533548786000)
+++ core/src/test/java/org/hibernate/ogm/backendtck/type/date/UtilDateEntity.java	(date 1533548786000)
@@ -0,0 +1,77 @@
+package org.hibernate.ogm.backendtck.type.date;
+
+import java.util.Date;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+@Entity
+public class UtilDateEntity {
+
+	@Id
+	private Integer id;
+
+	private String name;
+
+	@Temporal( TemporalType.DATE )
+	private Date day;
+
+	@Temporal( TemporalType.TIME )
+	private Date time;
+
+	@Temporal( TemporalType.TIMESTAMP )
+	private Date moment;
+
+	public UtilDateEntity() {
+	}
+
+	public UtilDateEntity(Integer id, String name) {
+		this.id = id;
+		this.name = name;
+
+		this.moment = new Date();
+		this.day = moment;
+		this.time = moment;
+	}
+
+	public Integer getId() {
+		return id;
+	}
+
+	public void setId(Integer id) {
+		this.id = id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public Date getDay() {
+		return day;
+	}
+
+	public void setDay(Date day) {
+		this.day = day;
+	}
+
+	public Date getTime() {
+		return time;
+	}
+
+	public void setTime(Date time) {
+		this.time = time;
+	}
+
+	public Date getMoment() {
+		return moment;
+	}
+
+	public void setMoment(Date moment) {
+		this.moment = moment;
+	}
+}
