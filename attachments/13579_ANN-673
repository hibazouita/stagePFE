Index: src/java/org/hibernate/cfg/AnnotationConfiguration.java
===================================================================
--- src/java/org/hibernate/cfg/AnnotationConfiguration.java	(revision 14158)
+++ src/java/org/hibernate/cfg/AnnotationConfiguration.java	(working copy)
@@ -332,34 +332,7 @@
 		 * graph circularity (ie PK made of a many to one linking to
 		 * an entity having a PK made of a ManyToOne ...
 		 */
-		SortedSet<FkSecondPass> fkSecondPasses = new TreeSet<FkSecondPass>(
-				new Comparator() {
-					//The comparator implementation has to respect the compare=0 => equals() = true for sets
-					public int compare(Object o1, Object o2) {
-						if (! (o1 instanceof FkSecondPass &&  o2 instanceof FkSecondPass) ) {
-							throw new AssertionFailure("comparint FkSecondPass with non FkSecondPass");
-						}
-						FkSecondPass f1 = (FkSecondPass) o1;
-						FkSecondPass f2 = (FkSecondPass) o2;
-						int compare = f1.getValue().getTable().getQuotedName().compareTo(
-								f2.getValue().getTable().getQuotedName()
-						);
-						if (compare == 0) {
-							//same table, we still need to differenciate true equality
-							if ( f1.hashCode() < f2.hashCode() ) {
-								compare = -1;
-							}
-							else if ( f1.hashCode() == f2.hashCode() ) {
-								compare = 0;
-							}
-							else {
-								compare = 1;
-							}
-						}
-						return compare;
-					}
-				}
-		);
+		SortedSet<FkSecondPass> fkSecondPasses = new TreeSet<FkSecondPass>();
 		while ( iter.hasNext() ) {
 			SecondPass sp = (SecondPass) iter.next();
 			//do the second pass of fk before the others and remove them
Index: src/java/org/hibernate/cfg/FkSecondPass.java
===================================================================
--- src/java/org/hibernate/cfg/FkSecondPass.java	(revision 14158)
+++ src/java/org/hibernate/cfg/FkSecondPass.java	(working copy)
@@ -19,7 +19,7 @@
  *
  * @author Emmanuel Bernard
  */
-public class FkSecondPass implements SecondPass {
+public class FkSecondPass implements SecondPass, Comparable {
 	private ToOne value;
 	private Ejb3JoinColumn[] columns;
 	private boolean unique;
@@ -74,4 +74,15 @@
 			throw new AssertionFailure( "FkSecondPass for a wrong value type: " + value.getClass().getName() );
 		}
 	}
+
+	public int compareTo(Object o) {
+		FkSecondPass f2 = (FkSecondPass)o;
+
+		int compare = value.getTable().getQuotedName().compareTo(
+				f2.value.getTable().getQuotedName());
+		if (compare == 0) {
+			compare = path.compareTo(f2.path);
+		}
+		return compare;
+	}
 }
Index: src/java/org/hibernate/cfg/AnnotationBinder.java
===================================================================
--- src/java/org/hibernate/cfg/AnnotationBinder.java	(revision 14158)
+++ src/java/org/hibernate/cfg/AnnotationBinder.java	(working copy)
@@ -943,6 +943,12 @@
 
 		log.debug( "Processing " + propertyHolder.getEntityName() + " " + accessType + " annotation" );
 		List<XProperty> properties = annotatedClass.getDeclaredProperties( accessType );
+		//order so that property are used int he same order when binding native query
+		java.util.Collections.sort( properties, new java.util.Comparator<XProperty>() {
+			public int compare(XProperty property1, XProperty property2) {
+				return property1.getName().compareTo( property2.getName() );
+			}
+		} );
 		for ( XProperty p : properties ) {
 			if ( !p.isTypeResolved() && !discoverTypeWithoutReflection( p ) && !mustBeSkipped( p, mappings ) ) {
 				throw new AnnotationException(
