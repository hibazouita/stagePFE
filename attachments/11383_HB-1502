Index: src/net/sf/hibernate/loader/OuterJoinLoader.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/loader/OuterJoinLoader.java,v
retrieving revision 1.31
diff -u -r1.31 OuterJoinLoader.java
--- src/net/sf/hibernate/loader/OuterJoinLoader.java	13 Aug 2004 14:36:30 -0000	1.31
+++ src/net/sf/hibernate/loader/OuterJoinLoader.java	2 Jun 2005 10:02:58 -0000
@@ -87,8 +87,15 @@
 	 * For an entity class, return a list of associations to be fetched by outerjoin
 	 */
 	protected final List walkTree(OuterJoinLoadable persister, String alias, SessionFactoryImplementor factory) throws MappingException {
+        System.out.println("--"+persister);
 		List associations = new ArrayList();
 		walkClassTree(persister, alias, associations, new HashSet(), StringHelper.EMPTY_STRING, 0, factory);
+        int count = 0;
+        for (Iterator i = associations.iterator(); i.hasNext();) {
+            OuterJoinableAssociation element = (OuterJoinableAssociation) i.next();
+            System.out.println(count+":"+element.tableName);
+            count ++;
+        }
 		return associations;
 	}
 	
@@ -467,10 +474,11 @@
 			!visitedPersisters.contains(joinable) &&                                   // to avoid circularities
 			( !joinable.isCollection() || !containsCollectionPersister(associations) ) // to avoid cartesian product problem
 		);
-		
+
 		if (enable) {
-			
-			visitedPersisters.add(persister);
+            System.out.println(path);
+			boolean persisterAdded = visitedPersisters.add(persister);
+            System.out.println(visitedPersisters);
 			OuterJoinableAssociation assoc = new OuterJoinableAssociation();
 			associations.add(assoc);
 
@@ -514,7 +522,9 @@
 					);
 				}
 			}
-
+            if (persisterAdded) {
+                visitedPersisters.remove(persister);
+            }
 		}
 	}
 	
