package be.xepos.services.fashionservice.relatie.domain.hibernatebug;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;

@Entity
@Table(name = "relation")
@SqlResultSetMapping(name = "relationWithFirstContact", entities = { @EntityResult(entityClass = Relation.class),//
        @EntityResult(entityClass = Contactperson.class) })
@Inheritance(strategy = InheritanceType.JOINED)
public class Relation {

    @EmbeddedId
    private RelationId id;

    @Column(name = "namebb")
    private String name;

}

package be.xepos.services.fashionservice.relatie.domain.hibernatebug;

import javax.persistence.Column;
import javax.persistence.Embeddable;

@Embeddable
public class RelationId {
    @Column(name = "firbbm", length = 3, nullable = false)
    private String firmbb;

    @Column(name = "hkkdbb", length = 1, nullable = false)
    private String hkkdbb;

    @Column(name = "rlnrbb", length = 7, nullable = false)
    private String rlnrbb;
}

package be.xepos.services.fashionservice.relatie.domain.hibernatebug;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;

@Entity
@Table(name = "contact")
public class Contactperson {

    @EmbeddedId
    private ContactpersonId id;

    @Column(name = "namecp")
    private String name;
}

package be.xepos.services.fashionservice.relatie.domain.hibernatebug;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;

@Entity
@Table(name = "contact")
public class Contactperson {

    @EmbeddedId
    private ContactpersonId id;

    @Column(name = "namecp")
    private String name;
}


package be.xepos.services.fashionservice.relatie.domain.hibernatebug;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.PrimaryKeyJoinColumns;
import javax.persistence.Table;

import be.xepos.services.fashionservice.relatie.klant.domain.Fakldb;

@Entity
@Table(name = Fakldb.TABLE)
@PrimaryKeyJoinColumns({//
@PrimaryKeyJoinColumn(name = "firmkd", referencedColumnName = "firmbb"),//
        @PrimaryKeyJoinColumn(name = "hkkdkd", referencedColumnName = "hkkdbb"),//
        @PrimaryKeyJoinColumn(name = "klnrkd", referencedColumnName = "rlnrbb") //
})
public class Customer extends Relation {

    @Column(name = "vatnrkd")
    private String vatnr;
}


package be.xepos.services.fashionservice.relatie.domain.hibernatebug;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

public class RelationDaoImpl {

    @PersistenceContext
    protected EntityManager em;

    public List<Relation> searchRelations() {
        List<Relation> result = new ArrayList<Relation>();
        StringBuilder sb = new StringBuilder();
        sb.append("select r.*, c.* from relation r");
        sb.append(" left join contactperson c on c.firmcp=r.firmbb and c.hkkdcp=r.hkkdcp and c.rlnrcp = r.rlnrbb");
        sb.append(" and c.psslcp = 1");
        // here comes additional where statement ....
        Query query = em.createNativeQuery(sb.toString(), "relationWithFirstContact");
        List<Object[]> resultList = query.getResultList();
        if (resultList != null) {
            for (Object[] row : resultList) {
                // Here comes assembling to dto ...

                // in array index 0 = (Relation) row[0];
                // in array index 1 = (Contactperson) row[1]);
                result.add((Relation) row[0]);
            }
        }
        return result;
    }
}



javax.persistence.PersistenceException: org.hibernate.exception.SQLGrammarException: could not execute query
	at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1235)
	at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1168)
	at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:250)
	at be.xepos.services.fashionservice.relatie.dao.impl.FarlbbDaoImpl.search(FarlbbDaoImpl.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:166)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:90)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at $Proxy116.search(Unknown Source)
	at be.xepos.services.fashionservice.impl.RelatieServiceImpl.search(RelatieServiceImpl.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:90)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at $Proxy118.search(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)
	... 35 more
Caused by: org.hibernate.exception.SQLGrammarException: could not execute query
	at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:92)
	at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66)
	at org.hibernate.loader.Loader.doList(Loader.java:2297)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2172)
	at org.hibernate.loader.Loader.list(Loader.java:2167)
	at org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:316)
	at org.hibernate.impl.SessionImpl.listCustomQuery(SessionImpl.java:1832)
	at org.hibernate.impl.AbstractSessionImpl.list(AbstractSessionImpl.java:165)
	at org.hibernate.impl.SQLQueryImpl.list(SQLQueryImpl.java:179)
	at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:241)
	... 70 more
Caused by: java.sql.SQLException: An undefined column name was detected.
	at com.ibm.as400.access.JDError.throwSQLException(JDError.java:385)
	at com.ibm.as400.access.JDError.throwSQLException(JDError.java:362)
	at com.ibm.as400.access.JDServerRow.findField(JDServerRow.java:443)
	at com.ibm.as400.access.AS400JDBCResultSet.findColumn(AS400JDBCResultSet.java:529)
	at com.ibm.as400.access.AS400JDBCResultSet.getInt(AS400JDBCResultSet.java:2956)
	at org.hibernate.type.IntegerType.get(IntegerType.java:51)
	at org.hibernate.type.NullableType.nullSafeGet(NullableType.java:186)
	at org.hibernate.type.NullableType.nullSafeGet(NullableType.java:212)
	at org.hibernate.loader.Loader.getInstanceClass(Loader.java:1485)
	at org.hibernate.loader.Loader.instanceNotYetLoaded(Loader.java:1327)
	at org.hibernate.loader.Loader.getRow(Loader.java:1251)
	at org.hibernate.loader.Loader.getRowFromResultSet(Loader.java:619)
	at org.hibernate.loader.Loader.doQuery(Loader.java:745)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:270)
	at org.hibernate.loader.Loader.doList(Loader.java:2294)
	... 77 more
