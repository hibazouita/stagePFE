Index: /HiberanteShards/test/org/hibernate/shards/strategy/exit/OrderExitOperationTest.java
===================================================================
--- /HiberanteShards/test/org/hibernate/shards/strategy/exit/OrderExitOperationTest.java	(revision 3880)
+++ /HiberanteShards/test/org/hibernate/shards/strategy/exit/OrderExitOperationTest.java	(working copy)
@@ -123,6 +123,7 @@
             new MyInt(2, "maulik"),
             new MyInt(3, "gut"),
             new MyInt(5, "bomb"));
+    
     List unShuffledList = oeoName.apply(oeoValue.apply(shuffledList));
 
 
@@ -129,6 +130,66 @@
     assertEquals(answer, unShuffledList);
 
   }
+  
+  public void testFailMultipleOrderings() throws Exception {
+      Order orderValue = Order.asc("value");
+      Order orderName = Order.desc("name");
+
+      OrderExitOperation oeoValue = new OrderExitOperation(orderValue);
+      OrderExitOperation oeoName = new OrderExitOperation(orderName);
+      
+      shuffledList = new ArrayList<Object>();
+      shuffledList.add(new MyInt(2, "tom"));
+      shuffledList.add(new MyInt(1, "aviad"));
+      shuffledList.add(new MyInt(1, "marx"));
+      shuffledList.add(new MyInt(1, "kobi"));
+      shuffledList.add(new MyInt(2, "john"));
+
+      List<MyInt> answer =
+          Lists.newArrayList(
+              new MyInt(1, "marx"),
+              new MyInt(1, "kobi"),
+              new MyInt(1, "aviad"),
+              new MyInt(2, "tom"),
+              new MyInt(2, "john"));
+      
+      List unShuffledList = oeoName.apply(oeoValue.apply(shuffledList));
+
+
+      assertNotSame(answer, unShuffledList);
+
+    }
+  
+  public void testNewMultipleOrderings() throws Exception {
+      Order orderValue = Order.asc("value");
+      Order orderName = Order.desc("name");
+      List<Order> orders = new ArrayList<Order>();
+      orders.add(orderValue);
+      orders.add(orderName);
+      OrderExitOperation oeoValue = new OrderExitOperation(orders);
+      
+      shuffledList = new ArrayList<Object>();
+      shuffledList.add(new MyInt(2, "tom"));
+      shuffledList.add(new MyInt(1, "aviad"));
+      shuffledList.add(new MyInt(1, "marx"));
+      shuffledList.add(new MyInt(1, "kobi"));
+      shuffledList.add(new MyInt(2, "john"));
+      
+
+      List<MyInt> answer =
+          Lists.newArrayList(
+              new MyInt(1, "marx"),
+              new MyInt(1, "kobi"),
+              new MyInt(1, "aviad"),
+              new MyInt(2, "tom"),
+              new MyInt(2, "john"));
+      
+      List unShuffledList = oeoValue.apply(shuffledList);
+
+
+      assertEquals(answer, unShuffledList);
+
+    }
 
   static class SessionFactoryMock extends SessionFactoryDefaultMock {
 
